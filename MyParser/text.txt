    1:  1: File (
    1:  1: . "package"
    1:  9: . IDENT main
    1: 13: . ";"
    3:  1: . GenDecl(import) (
    3:  1: . . "import"
    3:  8: . . "("
    4:  2: . . ImportSpec (
    4:  2: . . . STRING "fmt"
    4:  7: . . . ";"
    5:  2: . . )
    5:  2: . . ImportSpec (
    5:  2: . . . STRING "strings"
    5: 11: . . . ";"
    6:  1: . . )
    6:  1: . . ")"
    6:  2: . . ";"
    8:  1: . )
    8:  1: . Declaration (
    8:  1: . . GenDecl(var) (
    8:  1: . . . "var"
    8:  5: . . . varSpec (
    8:  5: . . . . IdentList (
    8:  5: . . . . . IDENT str
    8:  9: . . . . )
    8:  9: . . . . TypeName (
    8:  9: . . . . . IDENT string
    8: 16: . . . . )
    8: 16: . . . . "="
    8: 18: . . . . ExpressionList (
    8: 18: . . . . . Expression (
    8: 18: . . . . . . BinaryExpr (
    8: 18: . . . . . . . UnaryExpr (
    8: 18: . . . . . . . . PrimaryExpr (
    8: 18: . . . . . . . . . Operand (
    8: 18: . . . . . . . . . . STRING "//pragma gomp parallel"
    8: 42: . . . . . . . . . )
    8: 42: . . . . . . . . )
    8: 42: . . . . . . . )
    8: 42: . . . . . . )
    8: 42: . . . . . )
    8: 42: . . . . )
    8: 42: . . . . ";"
   10:  1: . . . )
   10:  1: . . )
   10:  1: . )
   10:  1: . Declaration (
   10:  1: . . FunctionDecl (
   10:  1: . . . "func"
   10:  6: . . . IDENT IsPragmaGomp
   10: 19: . . . Signature (
   10: 19: . . . . Parameters (
   10: 19: . . . . . "("
   10: 20: . . . . . ParameterList (
   10: 20: . . . . . . VarList (
   10: 20: . . . . . . . TypeName (
   10: 20: . . . . . . . . IDENT str
   10: 24: . . . . . . . )
   10: 24: . . . . . . . TypeName (
   10: 24: . . . . . . . . IDENT string
   10: 30: . . . . . . . )
   10: 30: . . . . . . )
   10: 30: . . . . . )
   10: 30: . . . . . ")"
   10: 32: . . . . )
   10: 32: . . . . Result (
   10: 32: . . . . . TypeName (
   10: 32: . . . . . . IDENT bool
   10: 36: . . . . . )
   10: 36: . . . . )
   10: 36: . . . )
   10: 36: . . . Body (
   10: 36: . . . . "{"
   11:  2: . . . . StatementList (
   11:  2: . . . . . Statement (
   11:  2: . . . . . . SimpleStmt (
   11:  2: . . . . . . . ExpressionList (
   11:  2: . . . . . . . . Expression (
   11:  2: . . . . . . . . . BinaryExpr (
   11:  2: . . . . . . . . . . UnaryExpr (
   11:  2: . . . . . . . . . . . PrimaryExpr (
   11:  2: . . . . . . . . . . . . Operand (
   11:  2: . . . . . . . . . . . . . IDENT res
   11:  6: . . . . . . . . . . . . )
   11:  6: . . . . . . . . . . . )
   11:  6: . . . . . . . . . . )
   11:  6: . . . . . . . . . )
   11:  6: . . . . . . . . )
   11:  6: . . . . . . . )
   11:  6: . . . . . . . ":="
   11:  9: . . . . . . . ExpressionList (
   11:  9: . . . . . . . . Expression (
   11:  9: . . . . . . . . . BinaryExpr (
   11:  9: . . . . . . . . . . UnaryExpr (
   11:  9: . . . . . . . . . . . PrimaryExpr (
   11:  9: . . . . . . . . . . . . Operand (
   11:  9: . . . . . . . . . . . . . IDENT strings
   11: 16: . . . . . . . . . . . . )
   11: 16: . . . . . . . . . . . . "."
   11: 17: . . . . . . . . . . . . Selector (
   11: 17: . . . . . . . . . . . . . IDENT HasPrefix
   11: 26: . . . . . . . . . . . . )
   11: 26: . . . . . . . . . . . . CallOrConversion (
   11: 26: . . . . . . . . . . . . . "("
   11: 27: . . . . . . . . . . . . . Expression (
   11: 27: . . . . . . . . . . . . . . BinaryExpr (
   11: 27: . . . . . . . . . . . . . . . UnaryExpr (
   11: 27: . . . . . . . . . . . . . . . . PrimaryExpr (
   11: 27: . . . . . . . . . . . . . . . . . Operand (
   11: 27: . . . . . . . . . . . . . . . . . . IDENT str
   11: 30: . . . . . . . . . . . . . . . . . )
   11: 30: . . . . . . . . . . . . . . . . )
   11: 30: . . . . . . . . . . . . . . . )
   11: 30: . . . . . . . . . . . . . . )
   11: 30: . . . . . . . . . . . . . )
   11: 30: . . . . . . . . . . . . . ","
   11: 32: . . . . . . . . . . . . . Expression (
   11: 32: . . . . . . . . . . . . . . BinaryExpr (
   11: 32: . . . . . . . . . . . . . . . UnaryExpr (
   11: 32: . . . . . . . . . . . . . . . . PrimaryExpr (
   11: 32: . . . . . . . . . . . . . . . . . Operand (
   11: 32: . . . . . . . . . . . . . . . . . . STRING "//pragma gomp"
   11: 47: . . . . . . . . . . . . . . . . . )
   11: 47: . . . . . . . . . . . . . . . . )
   11: 47: . . . . . . . . . . . . . . . )
   11: 47: . . . . . . . . . . . . . . )
   11: 47: . . . . . . . . . . . . . )
   11: 47: . . . . . . . . . . . . . ")"
   11: 48: . . . . . . . . . . . . )
   11: 48: . . . . . . . . . . . )
   11: 48: . . . . . . . . . . )
   11: 48: . . . . . . . . . )
   11: 48: . . . . . . . . )
   11: 48: . . . . . . . )
   11: 48: . . . . . . )
   11: 48: . . . . . . ";"
   12:  2: . . . . . )
   12:  2: . . . . . Statement (
   12:  2: . . . . . . ReturnStmt (
   12:  2: . . . . . . . "return"
   12:  9: . . . . . . . ExpressionList (
   12:  9: . . . . . . . . Expression (
   12:  9: . . . . . . . . . BinaryExpr (
   12:  9: . . . . . . . . . . UnaryExpr (
   12:  9: . . . . . . . . . . . PrimaryExpr (
   12:  9: . . . . . . . . . . . . Operand (
   12:  9: . . . . . . . . . . . . . IDENT res
   12: 12: . . . . . . . . . . . . )
   12: 12: . . . . . . . . . . . )
   12: 12: . . . . . . . . . . )
   12: 12: . . . . . . . . . )
   12: 12: . . . . . . . . )
   12: 12: . . . . . . . )
   12: 12: . . . . . . . ";"
   13:  2: . . . . . . )
   13:  2: . . . . . )
   13:  2: . . . . )
   13:  2: . . . . "}"
   13:  3: . . . )
   13:  3: . . . ";"
   15:  1: . . )
   15:  1: . )
   15:  1: . Declaration (
   15:  1: . . FunctionDecl (
   15:  1: . . . "func"
   15:  6: . . . IDENT Split
   15: 12: . . . Signature (
   15: 12: . . . . Parameters (
   15: 12: . . . . . "("
   15: 13: . . . . . ParameterList (
   15: 13: . . . . . . VarList (
   15: 13: . . . . . . . TypeName (
   15: 13: . . . . . . . . IDENT str
   15: 17: . . . . . . . )
   15: 17: . . . . . . . TypeName (
   15: 17: . . . . . . . . IDENT string
   15: 23: . . . . . . . )
   15: 23: . . . . . . )
   15: 23: . . . . . )
   15: 23: . . . . . ")"
   15: 25: . . . . )
   15: 25: . . . . Result (
   15: 25: . . . . . ArrayType (
   15: 25: . . . . . . "["
   15: 26: . . . . . . "]"
   15: 27: . . . . . . Type (
   15: 27: . . . . . . . TypeName (
   15: 27: . . . . . . . . IDENT string
   15: 34: . . . . . . . )
   15: 34: . . . . . . )
   15: 34: . . . . . )
   15: 34: . . . . )
   15: 34: . . . )
   15: 34: . . . Body (
   15: 34: . . . . "{"
   16:  2: . . . . StatementList (
   16:  2: . . . . . Statement (
   16:  2: . . . . . . SimpleStmt (
   16:  2: . . . . . . . ExpressionList (
   16:  2: . . . . . . . . Expression (
   16:  2: . . . . . . . . . BinaryExpr (
   16:  2: . . . . . . . . . . UnaryExpr (
   16:  2: . . . . . . . . . . . PrimaryExpr (
   16:  2: . . . . . . . . . . . . Operand (
   16:  2: . . . . . . . . . . . . . IDENT res
   16:  6: . . . . . . . . . . . . )
   16:  6: . . . . . . . . . . . )
   16:  6: . . . . . . . . . . )
   16:  6: . . . . . . . . . )
   16:  6: . . . . . . . . )
   16:  6: . . . . . . . )
   16:  6: . . . . . . . ":="
   16:  9: . . . . . . . ExpressionList (
   16:  9: . . . . . . . . Expression (
   16:  9: . . . . . . . . . BinaryExpr (
   16:  9: . . . . . . . . . . UnaryExpr (
   16:  9: . . . . . . . . . . . PrimaryExpr (
   16:  9: . . . . . . . . . . . . Operand (
   16:  9: . . . . . . . . . . . . . IDENT strings
   16: 16: . . . . . . . . . . . . )
   16: 16: . . . . . . . . . . . . "."
   16: 17: . . . . . . . . . . . . Selector (
   16: 17: . . . . . . . . . . . . . IDENT Fields
   16: 23: . . . . . . . . . . . . )
   16: 23: . . . . . . . . . . . . CallOrConversion (
   16: 23: . . . . . . . . . . . . . "("
   16: 24: . . . . . . . . . . . . . Expression (
   16: 24: . . . . . . . . . . . . . . BinaryExpr (
   16: 24: . . . . . . . . . . . . . . . UnaryExpr (
   16: 24: . . . . . . . . . . . . . . . . PrimaryExpr (
   16: 24: . . . . . . . . . . . . . . . . . Operand (
   16: 24: . . . . . . . . . . . . . . . . . . IDENT str
   16: 27: . . . . . . . . . . . . . . . . . )
   16: 27: . . . . . . . . . . . . . . . . )
   16: 27: . . . . . . . . . . . . . . . )
   16: 27: . . . . . . . . . . . . . . )
   16: 27: . . . . . . . . . . . . . )
   16: 27: . . . . . . . . . . . . . ")"
   16: 28: . . . . . . . . . . . . )
   16: 28: . . . . . . . . . . . )
   16: 28: . . . . . . . . . . )
   16: 28: . . . . . . . . . )
   16: 28: . . . . . . . . )
   16: 28: . . . . . . . )
   16: 28: . . . . . . )
   16: 28: . . . . . . ";"
   17:  2: . . . . . )
   17:  2: . . . . . Statement (
   17:  2: . . . . . . ReturnStmt (
   17:  2: . . . . . . . "return"
   17:  9: . . . . . . . ExpressionList (
   17:  9: . . . . . . . . Expression (
   17:  9: . . . . . . . . . BinaryExpr (
   17:  9: . . . . . . . . . . UnaryExpr (
   17:  9: . . . . . . . . . . . PrimaryExpr (
   17:  9: . . . . . . . . . . . . Operand (
   17:  9: . . . . . . . . . . . . . IDENT res
   17: 12: . . . . . . . . . . . . )
   17: 12: . . . . . . . . . . . )
   17: 12: . . . . . . . . . . )
   17: 12: . . . . . . . . . )
   17: 12: . . . . . . . . )
   17: 12: . . . . . . . )
   17: 12: . . . . . . . ";"
   18:  2: . . . . . . )
   18:  2: . . . . . )
   18:  2: . . . . )
   18:  2: . . . . "}"
   18:  3: . . . )
   18:  3: . . . ";"
   20:  1: . . )
   20:  1: . )
   20:  1: . Declaration (
   20:  1: . . FunctionDecl (
   20:  1: . . . "func"
   20:  6: . . . IDENT PragmaType
   20: 17: . . . Signature (
   20: 17: . . . . Parameters (
   20: 17: . . . . . "("
   20: 18: . . . . . ParameterList (
   20: 18: . . . . . . VarList (
   20: 18: . . . . . . . TypeName (
   20: 18: . . . . . . . . IDENT pragma
   20: 25: . . . . . . . )
   20: 25: . . . . . . . TypeName (
   20: 25: . . . . . . . . IDENT string
   20: 31: . . . . . . . )
   20: 31: . . . . . . )
   20: 31: . . . . . )
   20: 31: . . . . . ")"
   20: 33: . . . . )
   20: 33: . . . . Result (
   20: 33: . . . . . TypeName (
   20: 33: . . . . . . IDENT string
   20: 39: . . . . . )
   20: 39: . . . . )
   20: 39: . . . )
   20: 39: . . . Body (
   20: 39: . . . . "{"
   21:  2: . . . . StatementList (
   21:  2: . . . . . Statement (
   21:  2: . . . . . . SimpleStmt (
   21:  2: . . . . . . . ExpressionList (
   21:  2: . . . . . . . . Expression (
   21:  2: . . . . . . . . . BinaryExpr (
   21:  2: . . . . . . . . . . UnaryExpr (
   21:  2: . . . . . . . . . . . PrimaryExpr (
   21:  2: . . . . . . . . . . . . Operand (
   21:  2: . . . . . . . . . . . . . IDENT res
   21:  6: . . . . . . . . . . . . )
   21:  6: . . . . . . . . . . . )
   21:  6: . . . . . . . . . . )
   21:  6: . . . . . . . . . )
   21:  6: . . . . . . . . )
   21:  6: . . . . . . . )
   21:  6: . . . . . . . ":="
   21:  9: . . . . . . . ExpressionList (
   21:  9: . . . . . . . . Expression (
   21:  9: . . . . . . . . . BinaryExpr (
   21:  9: . . . . . . . . . . UnaryExpr (
   21:  9: . . . . . . . . . . . PrimaryExpr (
   21:  9: . . . . . . . . . . . . Operand (
   21:  9: . . . . . . . . . . . . . IDENT strings
   21: 16: . . . . . . . . . . . . )
   21: 16: . . . . . . . . . . . . "."
   21: 17: . . . . . . . . . . . . Selector (
   21: 17: . . . . . . . . . . . . . IDENT ToUpper
   21: 24: . . . . . . . . . . . . )
   21: 24: . . . . . . . . . . . . CallOrConversion (
   21: 24: . . . . . . . . . . . . . "("
   21: 25: . . . . . . . . . . . . . Expression (
   21: 25: . . . . . . . . . . . . . . BinaryExpr (
   21: 25: . . . . . . . . . . . . . . . UnaryExpr (
   21: 25: . . . . . . . . . . . . . . . . PrimaryExpr (
   21: 25: . . . . . . . . . . . . . . . . . Operand (
   21: 25: . . . . . . . . . . . . . . . . . . IDENT Split
   21: 30: . . . . . . . . . . . . . . . . . )
   21: 30: . . . . . . . . . . . . . . . . . CallOrConversion (
   21: 30: . . . . . . . . . . . . . . . . . . "("
   21: 31: . . . . . . . . . . . . . . . . . . Expression (
   21: 31: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   21: 31: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   21: 31: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   21: 31: . . . . . . . . . . . . . . . . . . . . . . Operand (
   21: 31: . . . . . . . . . . . . . . . . . . . . . . . IDENT pragma
   21: 37: . . . . . . . . . . . . . . . . . . . . . . )
   21: 37: . . . . . . . . . . . . . . . . . . . . . )
   21: 37: . . . . . . . . . . . . . . . . . . . . )
   21: 37: . . . . . . . . . . . . . . . . . . . )
   21: 37: . . . . . . . . . . . . . . . . . . )
   21: 37: . . . . . . . . . . . . . . . . . . ")"
   21: 38: . . . . . . . . . . . . . . . . . )
   21: 38: . . . . . . . . . . . . . . . . . IndexOrSlice (
   21: 38: . . . . . . . . . . . . . . . . . . "["
   21: 39: . . . . . . . . . . . . . . . . . . Expression (
   21: 39: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   21: 39: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   21: 39: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   21: 39: . . . . . . . . . . . . . . . . . . . . . . Operand (
   21: 39: . . . . . . . . . . . . . . . . . . . . . . . INT 2
   21: 40: . . . . . . . . . . . . . . . . . . . . . . )
   21: 40: . . . . . . . . . . . . . . . . . . . . . )
   21: 40: . . . . . . . . . . . . . . . . . . . . )
   21: 40: . . . . . . . . . . . . . . . . . . . )
   21: 40: . . . . . . . . . . . . . . . . . . )
   21: 40: . . . . . . . . . . . . . . . . . . "]"
   21: 41: . . . . . . . . . . . . . . . . . )
   21: 41: . . . . . . . . . . . . . . . . )
   21: 41: . . . . . . . . . . . . . . . )
   21: 41: . . . . . . . . . . . . . . )
   21: 41: . . . . . . . . . . . . . )
   21: 41: . . . . . . . . . . . . . ")"
   21: 43: . . . . . . . . . . . . )
   21: 43: . . . . . . . . . . . )
   21: 43: . . . . . . . . . . )
   21: 43: . . . . . . . . . )
   21: 43: . . . . . . . . )
   21: 43: . . . . . . . )
   21: 43: . . . . . . )
   21: 43: . . . . . . ";"
   22:  2: . . . . . )
   22:  2: . . . . . Statement (
   22:  2: . . . . . . ReturnStmt (
   22:  2: . . . . . . . "return"
   22:  9: . . . . . . . ExpressionList (
   22:  9: . . . . . . . . Expression (
   22:  9: . . . . . . . . . BinaryExpr (
   22:  9: . . . . . . . . . . UnaryExpr (
   22:  9: . . . . . . . . . . . PrimaryExpr (
   22:  9: . . . . . . . . . . . . Operand (
   22:  9: . . . . . . . . . . . . . IDENT res
   22: 12: . . . . . . . . . . . . )
   22: 12: . . . . . . . . . . . )
   22: 12: . . . . . . . . . . )
   22: 12: . . . . . . . . . )
   22: 12: . . . . . . . . )
   22: 12: . . . . . . . )
   22: 12: . . . . . . . ";"
   23:  2: . . . . . . )
   23:  2: . . . . . )
   23:  2: . . . . )
   23:  2: . . . . "}"
   23:  3: . . . )
   23:  3: . . . ";"
   25:  1: . . )
   25:  1: . )
   25:  1: . Declaration (
   25:  1: . . FunctionDecl (
   25:  1: . . . "func"
   25:  6: . . . IDENT main
   25: 10: . . . Signature (
   25: 10: . . . . Parameters (
   25: 10: . . . . . "("
   25: 11: . . . . . ")"
   25: 12: . . . . )
   25: 12: . . . . Result (
   25: 12: . . . . )
   25: 12: . . . )
   25: 12: . . . Body (
   25: 12: . . . . "{"
   27:  2: . . . . StatementList (
   27:  2: . . . . . Statement (
   27:  2: . . . . . . SimpleStmt (
   27:  2: . . . . . . . ExpressionList (
   27:  2: . . . . . . . . Expression (
   27:  2: . . . . . . . . . BinaryExpr (
   27:  2: . . . . . . . . . . UnaryExpr (
   27:  2: . . . . . . . . . . . PrimaryExpr (
   27:  2: . . . . . . . . . . . . Operand (
   27:  2: . . . . . . . . . . . . . IDENT fmt
   27:  5: . . . . . . . . . . . . )
   27:  5: . . . . . . . . . . . . "."
   27:  6: . . . . . . . . . . . . Selector (
   27:  6: . . . . . . . . . . . . . IDENT Println
   27: 13: . . . . . . . . . . . . )
   27: 13: . . . . . . . . . . . . CallOrConversion (
   27: 13: . . . . . . . . . . . . . "("
   27: 14: . . . . . . . . . . . . . Expression (
   27: 14: . . . . . . . . . . . . . . BinaryExpr (
   27: 14: . . . . . . . . . . . . . . . UnaryExpr (
   27: 14: . . . . . . . . . . . . . . . . PrimaryExpr (
   27: 14: . . . . . . . . . . . . . . . . . Operand (
   27: 14: . . . . . . . . . . . . . . . . . . STRING "¿Es pragma gomp? ->"
   27: 36: . . . . . . . . . . . . . . . . . )
   27: 36: . . . . . . . . . . . . . . . . )
   27: 36: . . . . . . . . . . . . . . . )
   27: 36: . . . . . . . . . . . . . . )
   27: 36: . . . . . . . . . . . . . )
   27: 36: . . . . . . . . . . . . . ","
   27: 38: . . . . . . . . . . . . . Expression (
   27: 38: . . . . . . . . . . . . . . BinaryExpr (
   27: 38: . . . . . . . . . . . . . . . UnaryExpr (
   27: 38: . . . . . . . . . . . . . . . . PrimaryExpr (
   27: 38: . . . . . . . . . . . . . . . . . Operand (
   27: 38: . . . . . . . . . . . . . . . . . . IDENT IsPragmaGomp
   27: 50: . . . . . . . . . . . . . . . . . )
   27: 50: . . . . . . . . . . . . . . . . . CallOrConversion (
   27: 50: . . . . . . . . . . . . . . . . . . "("
   27: 51: . . . . . . . . . . . . . . . . . . Expression (
   27: 51: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   27: 51: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   27: 51: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   27: 51: . . . . . . . . . . . . . . . . . . . . . . Operand (
   27: 51: . . . . . . . . . . . . . . . . . . . . . . . IDENT str
   27: 54: . . . . . . . . . . . . . . . . . . . . . . )
   27: 54: . . . . . . . . . . . . . . . . . . . . . )
   27: 54: . . . . . . . . . . . . . . . . . . . . )
   27: 54: . . . . . . . . . . . . . . . . . . . )
   27: 54: . . . . . . . . . . . . . . . . . . )
   27: 54: . . . . . . . . . . . . . . . . . . ")"
   27: 55: . . . . . . . . . . . . . . . . . )
   27: 55: . . . . . . . . . . . . . . . . )
   27: 55: . . . . . . . . . . . . . . . )
   27: 55: . . . . . . . . . . . . . . )
   27: 55: . . . . . . . . . . . . . )
   27: 55: . . . . . . . . . . . . . ")"
   27: 56: . . . . . . . . . . . . )
   27: 56: . . . . . . . . . . . )
   27: 56: . . . . . . . . . . )
   27: 56: . . . . . . . . . )
   27: 56: . . . . . . . . )
   27: 56: . . . . . . . )
   27: 56: . . . . . . )
   27: 56: . . . . . . ";"
   28:  2: . . . . . )
   28:  2: . . . . . Statement (
   28:  2: . . . . . . SimpleStmt (
   28:  2: . . . . . . . ExpressionList (
   28:  2: . . . . . . . . Expression (
   28:  2: . . . . . . . . . BinaryExpr (
   28:  2: . . . . . . . . . . UnaryExpr (
   28:  2: . . . . . . . . . . . PrimaryExpr (
   28:  2: . . . . . . . . . . . . Operand (
   28:  2: . . . . . . . . . . . . . IDENT fmt
   28:  5: . . . . . . . . . . . . )
   28:  5: . . . . . . . . . . . . "."
   28:  6: . . . . . . . . . . . . Selector (
   28:  6: . . . . . . . . . . . . . IDENT Println
   28: 13: . . . . . . . . . . . . )
   28: 13: . . . . . . . . . . . . CallOrConversion (
   28: 13: . . . . . . . . . . . . . "("
   28: 14: . . . . . . . . . . . . . Expression (
   28: 14: . . . . . . . . . . . . . . BinaryExpr (
   28: 14: . . . . . . . . . . . . . . . UnaryExpr (
   28: 14: . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 14: . . . . . . . . . . . . . . . . . Operand (
   28: 14: . . . . . . . . . . . . . . . . . . STRING "Campos de pragma ->"
   28: 35: . . . . . . . . . . . . . . . . . )
   28: 35: . . . . . . . . . . . . . . . . )
   28: 35: . . . . . . . . . . . . . . . )
   28: 35: . . . . . . . . . . . . . . )
   28: 35: . . . . . . . . . . . . . )
   28: 35: . . . . . . . . . . . . . ","
   28: 37: . . . . . . . . . . . . . Expression (
   28: 37: . . . . . . . . . . . . . . BinaryExpr (
   28: 37: . . . . . . . . . . . . . . . UnaryExpr (
   28: 37: . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 37: . . . . . . . . . . . . . . . . . Operand (
   28: 37: . . . . . . . . . . . . . . . . . . IDENT Split
   28: 42: . . . . . . . . . . . . . . . . . )
   28: 42: . . . . . . . . . . . . . . . . . CallOrConversion (
   28: 42: . . . . . . . . . . . . . . . . . . "("
   28: 43: . . . . . . . . . . . . . . . . . . Expression (
   28: 43: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   28: 43: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   28: 43: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 43: . . . . . . . . . . . . . . . . . . . . . . Operand (
   28: 43: . . . . . . . . . . . . . . . . . . . . . . . IDENT str
   28: 46: . . . . . . . . . . . . . . . . . . . . . . )
   28: 46: . . . . . . . . . . . . . . . . . . . . . )
   28: 46: . . . . . . . . . . . . . . . . . . . . )
   28: 46: . . . . . . . . . . . . . . . . . . . )
   28: 46: . . . . . . . . . . . . . . . . . . )
   28: 46: . . . . . . . . . . . . . . . . . . ")"
   28: 47: . . . . . . . . . . . . . . . . . )
   28: 47: . . . . . . . . . . . . . . . . . IndexOrSlice (
   28: 47: . . . . . . . . . . . . . . . . . . "["
   28: 48: . . . . . . . . . . . . . . . . . . Expression (
   28: 48: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   28: 48: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   28: 48: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 48: . . . . . . . . . . . . . . . . . . . . . . Operand (
   28: 48: . . . . . . . . . . . . . . . . . . . . . . . INT 0
   28: 49: . . . . . . . . . . . . . . . . . . . . . . )
   28: 49: . . . . . . . . . . . . . . . . . . . . . )
   28: 49: . . . . . . . . . . . . . . . . . . . . )
   28: 49: . . . . . . . . . . . . . . . . . . . )
   28: 49: . . . . . . . . . . . . . . . . . . )
   28: 49: . . . . . . . . . . . . . . . . . . "]"
   28: 50: . . . . . . . . . . . . . . . . . )
   28: 50: . . . . . . . . . . . . . . . . )
   28: 50: . . . . . . . . . . . . . . . )
   28: 50: . . . . . . . . . . . . . . )
   28: 50: . . . . . . . . . . . . . )
   28: 50: . . . . . . . . . . . . . ","
   28: 52: . . . . . . . . . . . . . Expression (
   28: 52: . . . . . . . . . . . . . . BinaryExpr (
   28: 52: . . . . . . . . . . . . . . . UnaryExpr (
   28: 52: . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 52: . . . . . . . . . . . . . . . . . Operand (
   28: 52: . . . . . . . . . . . . . . . . . . STRING ","
   28: 55: . . . . . . . . . . . . . . . . . )
   28: 55: . . . . . . . . . . . . . . . . )
   28: 55: . . . . . . . . . . . . . . . )
   28: 55: . . . . . . . . . . . . . . )
   28: 55: . . . . . . . . . . . . . )
   28: 55: . . . . . . . . . . . . . ","
   28: 57: . . . . . . . . . . . . . Expression (
   28: 57: . . . . . . . . . . . . . . BinaryExpr (
   28: 57: . . . . . . . . . . . . . . . UnaryExpr (
   28: 57: . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 57: . . . . . . . . . . . . . . . . . Operand (
   28: 57: . . . . . . . . . . . . . . . . . . IDENT Split
   28: 62: . . . . . . . . . . . . . . . . . )
   28: 62: . . . . . . . . . . . . . . . . . CallOrConversion (
   28: 62: . . . . . . . . . . . . . . . . . . "("
   28: 63: . . . . . . . . . . . . . . . . . . Expression (
   28: 63: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   28: 63: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   28: 63: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 63: . . . . . . . . . . . . . . . . . . . . . . Operand (
   28: 63: . . . . . . . . . . . . . . . . . . . . . . . IDENT str
   28: 66: . . . . . . . . . . . . . . . . . . . . . . )
   28: 66: . . . . . . . . . . . . . . . . . . . . . )
   28: 66: . . . . . . . . . . . . . . . . . . . . )
   28: 66: . . . . . . . . . . . . . . . . . . . )
   28: 66: . . . . . . . . . . . . . . . . . . )
   28: 66: . . . . . . . . . . . . . . . . . . ")"
   28: 67: . . . . . . . . . . . . . . . . . )
   28: 67: . . . . . . . . . . . . . . . . . IndexOrSlice (
   28: 67: . . . . . . . . . . . . . . . . . . "["
   28: 68: . . . . . . . . . . . . . . . . . . Expression (
   28: 68: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   28: 68: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   28: 68: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 68: . . . . . . . . . . . . . . . . . . . . . . Operand (
   28: 68: . . . . . . . . . . . . . . . . . . . . . . . INT 1
   28: 69: . . . . . . . . . . . . . . . . . . . . . . )
   28: 69: . . . . . . . . . . . . . . . . . . . . . )
   28: 69: . . . . . . . . . . . . . . . . . . . . )
   28: 69: . . . . . . . . . . . . . . . . . . . )
   28: 69: . . . . . . . . . . . . . . . . . . )
   28: 69: . . . . . . . . . . . . . . . . . . "]"
   28: 70: . . . . . . . . . . . . . . . . . )
   28: 70: . . . . . . . . . . . . . . . . )
   28: 70: . . . . . . . . . . . . . . . )
   28: 70: . . . . . . . . . . . . . . )
   28: 70: . . . . . . . . . . . . . )
   28: 70: . . . . . . . . . . . . . ","
   28: 72: . . . . . . . . . . . . . Expression (
   28: 72: . . . . . . . . . . . . . . BinaryExpr (
   28: 72: . . . . . . . . . . . . . . . UnaryExpr (
   28: 72: . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 72: . . . . . . . . . . . . . . . . . Operand (
   28: 72: . . . . . . . . . . . . . . . . . . STRING ","
   28: 75: . . . . . . . . . . . . . . . . . )
   28: 75: . . . . . . . . . . . . . . . . )
   28: 75: . . . . . . . . . . . . . . . )
   28: 75: . . . . . . . . . . . . . . )
   28: 75: . . . . . . . . . . . . . )
   28: 75: . . . . . . . . . . . . . ","
   28: 77: . . . . . . . . . . . . . Expression (
   28: 77: . . . . . . . . . . . . . . BinaryExpr (
   28: 77: . . . . . . . . . . . . . . . UnaryExpr (
   28: 77: . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 77: . . . . . . . . . . . . . . . . . Operand (
   28: 77: . . . . . . . . . . . . . . . . . . IDENT Split
   28: 82: . . . . . . . . . . . . . . . . . )
   28: 82: . . . . . . . . . . . . . . . . . CallOrConversion (
   28: 82: . . . . . . . . . . . . . . . . . . "("
   28: 83: . . . . . . . . . . . . . . . . . . Expression (
   28: 83: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   28: 83: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   28: 83: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 83: . . . . . . . . . . . . . . . . . . . . . . Operand (
   28: 83: . . . . . . . . . . . . . . . . . . . . . . . IDENT str
   28: 86: . . . . . . . . . . . . . . . . . . . . . . )
   28: 86: . . . . . . . . . . . . . . . . . . . . . )
   28: 86: . . . . . . . . . . . . . . . . . . . . )
   28: 86: . . . . . . . . . . . . . . . . . . . )
   28: 86: . . . . . . . . . . . . . . . . . . )
   28: 86: . . . . . . . . . . . . . . . . . . ")"
   28: 87: . . . . . . . . . . . . . . . . . )
   28: 87: . . . . . . . . . . . . . . . . . IndexOrSlice (
   28: 87: . . . . . . . . . . . . . . . . . . "["
   28: 88: . . . . . . . . . . . . . . . . . . Expression (
   28: 88: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   28: 88: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   28: 88: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   28: 88: . . . . . . . . . . . . . . . . . . . . . . Operand (
   28: 88: . . . . . . . . . . . . . . . . . . . . . . . INT 2
   28: 89: . . . . . . . . . . . . . . . . . . . . . . )
   28: 89: . . . . . . . . . . . . . . . . . . . . . )
   28: 89: . . . . . . . . . . . . . . . . . . . . )
   28: 89: . . . . . . . . . . . . . . . . . . . )
   28: 89: . . . . . . . . . . . . . . . . . . )
   28: 89: . . . . . . . . . . . . . . . . . . "]"
   28: 90: . . . . . . . . . . . . . . . . . )
   28: 90: . . . . . . . . . . . . . . . . )
   28: 90: . . . . . . . . . . . . . . . )
   28: 90: . . . . . . . . . . . . . . )
   28: 90: . . . . . . . . . . . . . )
   28: 90: . . . . . . . . . . . . . ")"
   28: 91: . . . . . . . . . . . . )
   28: 91: . . . . . . . . . . . )
   28: 91: . . . . . . . . . . )
   28: 91: . . . . . . . . . )
   28: 91: . . . . . . . . )
   28: 91: . . . . . . . )
   28: 91: . . . . . . )
   28: 91: . . . . . . ";"
   29:  2: . . . . . )
   29:  2: . . . . . Statement (
   29:  2: . . . . . . SimpleStmt (
   29:  2: . . . . . . . ExpressionList (
   29:  2: . . . . . . . . Expression (
   29:  2: . . . . . . . . . BinaryExpr (
   29:  2: . . . . . . . . . . UnaryExpr (
   29:  2: . . . . . . . . . . . PrimaryExpr (
   29:  2: . . . . . . . . . . . . Operand (
   29:  2: . . . . . . . . . . . . . IDENT fmt
   29:  5: . . . . . . . . . . . . )
   29:  5: . . . . . . . . . . . . "."
   29:  6: . . . . . . . . . . . . Selector (
   29:  6: . . . . . . . . . . . . . IDENT Println
   29: 13: . . . . . . . . . . . . )
   29: 13: . . . . . . . . . . . . CallOrConversion (
   29: 13: . . . . . . . . . . . . . "("
   29: 14: . . . . . . . . . . . . . Expression (
   29: 14: . . . . . . . . . . . . . . BinaryExpr (
   29: 14: . . . . . . . . . . . . . . . UnaryExpr (
   29: 14: . . . . . . . . . . . . . . . . PrimaryExpr (
   29: 14: . . . . . . . . . . . . . . . . . Operand (
   29: 14: . . . . . . . . . . . . . . . . . . STRING "Tipo de pragma:"
   29: 31: . . . . . . . . . . . . . . . . . )
   29: 31: . . . . . . . . . . . . . . . . )
   29: 31: . . . . . . . . . . . . . . . )
   29: 31: . . . . . . . . . . . . . . )
   29: 31: . . . . . . . . . . . . . )
   29: 31: . . . . . . . . . . . . . ","
   29: 33: . . . . . . . . . . . . . Expression (
   29: 33: . . . . . . . . . . . . . . BinaryExpr (
   29: 33: . . . . . . . . . . . . . . . UnaryExpr (
   29: 33: . . . . . . . . . . . . . . . . PrimaryExpr (
   29: 33: . . . . . . . . . . . . . . . . . Operand (
   29: 33: . . . . . . . . . . . . . . . . . . IDENT PragmaType
   29: 43: . . . . . . . . . . . . . . . . . )
   29: 43: . . . . . . . . . . . . . . . . . CallOrConversion (
   29: 43: . . . . . . . . . . . . . . . . . . "("
   29: 44: . . . . . . . . . . . . . . . . . . Expression (
   29: 44: . . . . . . . . . . . . . . . . . . . BinaryExpr (
   29: 44: . . . . . . . . . . . . . . . . . . . . UnaryExpr (
   29: 44: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (
   29: 44: . . . . . . . . . . . . . . . . . . . . . . Operand (
   29: 44: . . . . . . . . . . . . . . . . . . . . . . . IDENT str
   29: 47: . . . . . . . . . . . . . . . . . . . . . . )
   29: 47: . . . . . . . . . . . . . . . . . . . . . )
   29: 47: . . . . . . . . . . . . . . . . . . . . )
   29: 47: . . . . . . . . . . . . . . . . . . . )
   29: 47: . . . . . . . . . . . . . . . . . . )
   29: 47: . . . . . . . . . . . . . . . . . . ")"
   29: 48: . . . . . . . . . . . . . . . . . )
   29: 48: . . . . . . . . . . . . . . . . )
   29: 48: . . . . . . . . . . . . . . . )
   29: 48: . . . . . . . . . . . . . . )
   29: 48: . . . . . . . . . . . . . )
   29: 48: . . . . . . . . . . . . . ")"
   29: 49: . . . . . . . . . . . . )
   29: 49: . . . . . . . . . . . )
   29: 49: . . . . . . . . . . )
   29: 49: . . . . . . . . . )
   29: 49: . . . . . . . . )
   29: 49: . . . . . . . )
   29: 49: . . . . . . )
   29: 49: . . . . . . ";"
   30:  2: . . . . . )
   30:  2: . . . . )
   30:  2: . . . . "}"
   30:  3: . . . )
   30:  3: . . . ";"
   30:  4: . . )
   30:  4: . )
   30:  4: )
     0  *ast.File {
     1  .  Package: code.go:1:1
     2  .  Name: *ast.Ident {
     3  .  .  NamePos: code.go:1:9
     4  .  .  Name: "main"
     5  .  }
     6  .  Decls: []ast.Decl (len = 6) {
     7  .  .  0: *ast.GenDecl {
     8  .  .  .  TokPos: code.go:3:1
     9  .  .  .  Tok: import
    10  .  .  .  Lparen: code.go:3:8
    11  .  .  .  Specs: []ast.Spec (len = 2) {
    12  .  .  .  .  0: *ast.ImportSpec {
    13  .  .  .  .  .  Path: *ast.BasicLit {
    14  .  .  .  .  .  .  ValuePos: code.go:4:2
    15  .  .  .  .  .  .  Kind: STRING
    16  .  .  .  .  .  .  Value: "\"fmt\""
    17  .  .  .  .  .  }
    18  .  .  .  .  .  EndPos: -
    19  .  .  .  .  }
    20  .  .  .  .  1: *ast.ImportSpec {
    21  .  .  .  .  .  Path: *ast.BasicLit {
    22  .  .  .  .  .  .  ValuePos: code.go:5:2
    23  .  .  .  .  .  .  Kind: STRING
    24  .  .  .  .  .  .  Value: "\"strings\""
    25  .  .  .  .  .  }
    26  .  .  .  .  .  EndPos: -
    27  .  .  .  .  }
    28  .  .  .  }
    29  .  .  .  Rparen: code.go:6:1
    30  .  .  }
    31  .  .  1: *ast.GenDecl {
    32  .  .  .  TokPos: code.go:8:1
    33  .  .  .  Tok: var
    34  .  .  .  Lparen: -
    35  .  .  .  Specs: []ast.Spec (len = 1) {
    36  .  .  .  .  0: *ast.ValueSpec {
    37  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
    38  .  .  .  .  .  .  0: *ast.Ident {
    39  .  .  .  .  .  .  .  NamePos: code.go:8:5
    40  .  .  .  .  .  .  .  Name: "str"
    41  .  .  .  .  .  .  .  Obj: *ast.Object {
    42  .  .  .  .  .  .  .  .  Kind: var
    43  .  .  .  .  .  .  .  .  Name: "str"
    44  .  .  .  .  .  .  .  .  Decl: *(obj @ 36)
    45  .  .  .  .  .  .  .  .  Data: 0
    46  .  .  .  .  .  .  .  }
    47  .  .  .  .  .  .  }
    48  .  .  .  .  .  }
    49  .  .  .  .  .  Type: *ast.Ident {
    50  .  .  .  .  .  .  NamePos: code.go:8:9
    51  .  .  .  .  .  .  Name: "string"
    52  .  .  .  .  .  }
    53  .  .  .  .  .  Values: []ast.Expr (len = 1) {
    54  .  .  .  .  .  .  0: *ast.BasicLit {
    55  .  .  .  .  .  .  .  ValuePos: code.go:8:18
    56  .  .  .  .  .  .  .  Kind: STRING
    57  .  .  .  .  .  .  .  Value: "\"//pragma gomp parallel\""
    58  .  .  .  .  .  .  }
    59  .  .  .  .  .  }
    60  .  .  .  .  }
    61  .  .  .  }
    62  .  .  .  Rparen: -
    63  .  .  }
    64  .  .  2: *ast.FuncDecl {
    65  .  .  .  Name: *ast.Ident {
    66  .  .  .  .  NamePos: code.go:10:6
    67  .  .  .  .  Name: "IsPragmaGomp"
    68  .  .  .  .  Obj: *ast.Object {
    69  .  .  .  .  .  Kind: func
    70  .  .  .  .  .  Name: "IsPragmaGomp"
    71  .  .  .  .  .  Decl: *(obj @ 64)
    72  .  .  .  .  }
    73  .  .  .  }
    74  .  .  .  Type: *ast.FuncType {
    75  .  .  .  .  Func: code.go:10:1
    76  .  .  .  .  Params: *ast.FieldList {
    77  .  .  .  .  .  Opening: code.go:10:19
    78  .  .  .  .  .  List: []*ast.Field (len = 1) {
    79  .  .  .  .  .  .  0: *ast.Field {
    80  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
    81  .  .  .  .  .  .  .  .  0: *ast.Ident {
    82  .  .  .  .  .  .  .  .  .  NamePos: code.go:10:20
    83  .  .  .  .  .  .  .  .  .  Name: "str"
    84  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
    85  .  .  .  .  .  .  .  .  .  .  Kind: var
    86  .  .  .  .  .  .  .  .  .  .  Name: "str"
    87  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 79)
    88  .  .  .  .  .  .  .  .  .  }
    89  .  .  .  .  .  .  .  .  }
    90  .  .  .  .  .  .  .  }
    91  .  .  .  .  .  .  .  Type: *ast.Ident {
    92  .  .  .  .  .  .  .  .  NamePos: code.go:10:24
    93  .  .  .  .  .  .  .  .  Name: "string"
    94  .  .  .  .  .  .  .  }
    95  .  .  .  .  .  .  }
    96  .  .  .  .  .  }
    97  .  .  .  .  .  Closing: code.go:10:30
    98  .  .  .  .  }
    99  .  .  .  .  Results: *ast.FieldList {
   100  .  .  .  .  .  Opening: -
   101  .  .  .  .  .  List: []*ast.Field (len = 1) {
   102  .  .  .  .  .  .  0: *ast.Field {
   103  .  .  .  .  .  .  .  Type: *ast.Ident {
   104  .  .  .  .  .  .  .  .  NamePos: code.go:10:32
   105  .  .  .  .  .  .  .  .  Name: "bool"
   106  .  .  .  .  .  .  .  }
   107  .  .  .  .  .  .  }
   108  .  .  .  .  .  }
   109  .  .  .  .  .  Closing: -
   110  .  .  .  .  }
   111  .  .  .  }
   112  .  .  .  Body: *ast.BlockStmt {
   113  .  .  .  .  Lbrace: code.go:10:36
   114  .  .  .  .  List: []ast.Stmt (len = 2) {
   115  .  .  .  .  .  0: *ast.AssignStmt {
   116  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
   117  .  .  .  .  .  .  .  0: *ast.Ident {
   118  .  .  .  .  .  .  .  .  NamePos: code.go:11:2
   119  .  .  .  .  .  .  .  .  Name: "res"
   120  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   121  .  .  .  .  .  .  .  .  .  Kind: var
   122  .  .  .  .  .  .  .  .  .  Name: "res"
   123  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 115)
   124  .  .  .  .  .  .  .  .  }
   125  .  .  .  .  .  .  .  }
   126  .  .  .  .  .  .  }
   127  .  .  .  .  .  .  TokPos: code.go:11:6
   128  .  .  .  .  .  .  Tok: :=
   129  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
   130  .  .  .  .  .  .  .  0: *ast.CallExpr {
   131  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   132  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
   133  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:11:9
   134  .  .  .  .  .  .  .  .  .  .  Name: "strings"
   135  .  .  .  .  .  .  .  .  .  }
   136  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   137  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:11:17
   138  .  .  .  .  .  .  .  .  .  .  Name: "HasPrefix"
   139  .  .  .  .  .  .  .  .  .  }
   140  .  .  .  .  .  .  .  .  }
   141  .  .  .  .  .  .  .  .  Lparen: code.go:11:26
   142  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
   143  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   144  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:11:27
   145  .  .  .  .  .  .  .  .  .  .  Name: "str"
   146  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 84)
   147  .  .  .  .  .  .  .  .  .  }
   148  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
   149  .  .  .  .  .  .  .  .  .  .  ValuePos: code.go:11:32
   150  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   151  .  .  .  .  .  .  .  .  .  .  Value: "\"//pragma gomp\""
   152  .  .  .  .  .  .  .  .  .  }
   153  .  .  .  .  .  .  .  .  }
   154  .  .  .  .  .  .  .  .  Ellipsis: -
   155  .  .  .  .  .  .  .  .  Rparen: code.go:11:47
   156  .  .  .  .  .  .  .  }
   157  .  .  .  .  .  .  }
   158  .  .  .  .  .  }
   159  .  .  .  .  .  1: *ast.ReturnStmt {
   160  .  .  .  .  .  .  Return: code.go:12:2
   161  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
   162  .  .  .  .  .  .  .  0: *ast.Ident {
   163  .  .  .  .  .  .  .  .  NamePos: code.go:12:9
   164  .  .  .  .  .  .  .  .  Name: "res"
   165  .  .  .  .  .  .  .  .  Obj: *(obj @ 120)
   166  .  .  .  .  .  .  .  }
   167  .  .  .  .  .  .  }
   168  .  .  .  .  .  }
   169  .  .  .  .  }
   170  .  .  .  .  Rbrace: code.go:13:2
   171  .  .  .  }
   172  .  .  }
   173  .  .  3: *ast.FuncDecl {
   174  .  .  .  Name: *ast.Ident {
   175  .  .  .  .  NamePos: code.go:15:6
   176  .  .  .  .  Name: "Split"
   177  .  .  .  .  Obj: *ast.Object {
   178  .  .  .  .  .  Kind: func
   179  .  .  .  .  .  Name: "Split"
   180  .  .  .  .  .  Decl: *(obj @ 173)
   181  .  .  .  .  }
   182  .  .  .  }
   183  .  .  .  Type: *ast.FuncType {
   184  .  .  .  .  Func: code.go:15:1
   185  .  .  .  .  Params: *ast.FieldList {
   186  .  .  .  .  .  Opening: code.go:15:12
   187  .  .  .  .  .  List: []*ast.Field (len = 1) {
   188  .  .  .  .  .  .  0: *ast.Field {
   189  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
   190  .  .  .  .  .  .  .  .  0: *ast.Ident {
   191  .  .  .  .  .  .  .  .  .  NamePos: code.go:15:13
   192  .  .  .  .  .  .  .  .  .  Name: "str"
   193  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   194  .  .  .  .  .  .  .  .  .  .  Kind: var
   195  .  .  .  .  .  .  .  .  .  .  Name: "str"
   196  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 188)
   197  .  .  .  .  .  .  .  .  .  }
   198  .  .  .  .  .  .  .  .  }
   199  .  .  .  .  .  .  .  }
   200  .  .  .  .  .  .  .  Type: *ast.Ident {
   201  .  .  .  .  .  .  .  .  NamePos: code.go:15:17
   202  .  .  .  .  .  .  .  .  Name: "string"
   203  .  .  .  .  .  .  .  }
   204  .  .  .  .  .  .  }
   205  .  .  .  .  .  }
   206  .  .  .  .  .  Closing: code.go:15:23
   207  .  .  .  .  }
   208  .  .  .  .  Results: *ast.FieldList {
   209  .  .  .  .  .  Opening: -
   210  .  .  .  .  .  List: []*ast.Field (len = 1) {
   211  .  .  .  .  .  .  0: *ast.Field {
   212  .  .  .  .  .  .  .  Type: *ast.ArrayType {
   213  .  .  .  .  .  .  .  .  Lbrack: code.go:15:25
   214  .  .  .  .  .  .  .  .  Elt: *ast.Ident {
   215  .  .  .  .  .  .  .  .  .  NamePos: code.go:15:27
   216  .  .  .  .  .  .  .  .  .  Name: "string"
   217  .  .  .  .  .  .  .  .  }
   218  .  .  .  .  .  .  .  }
   219  .  .  .  .  .  .  }
   220  .  .  .  .  .  }
   221  .  .  .  .  .  Closing: -
   222  .  .  .  .  }
   223  .  .  .  }
   224  .  .  .  Body: *ast.BlockStmt {
   225  .  .  .  .  Lbrace: code.go:15:34
   226  .  .  .  .  List: []ast.Stmt (len = 2) {
   227  .  .  .  .  .  0: *ast.AssignStmt {
   228  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
   229  .  .  .  .  .  .  .  0: *ast.Ident {
   230  .  .  .  .  .  .  .  .  NamePos: code.go:16:2
   231  .  .  .  .  .  .  .  .  Name: "res"
   232  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   233  .  .  .  .  .  .  .  .  .  Kind: var
   234  .  .  .  .  .  .  .  .  .  Name: "res"
   235  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 227)
   236  .  .  .  .  .  .  .  .  }
   237  .  .  .  .  .  .  .  }
   238  .  .  .  .  .  .  }
   239  .  .  .  .  .  .  TokPos: code.go:16:6
   240  .  .  .  .  .  .  Tok: :=
   241  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
   242  .  .  .  .  .  .  .  0: *ast.CallExpr {
   243  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   244  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
   245  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:16:9
   246  .  .  .  .  .  .  .  .  .  .  Name: "strings"
   247  .  .  .  .  .  .  .  .  .  }
   248  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   249  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:16:17
   250  .  .  .  .  .  .  .  .  .  .  Name: "Fields"
   251  .  .  .  .  .  .  .  .  .  }
   252  .  .  .  .  .  .  .  .  }
   253  .  .  .  .  .  .  .  .  Lparen: code.go:16:23
   254  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   255  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   256  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:16:24
   257  .  .  .  .  .  .  .  .  .  .  Name: "str"
   258  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 193)
   259  .  .  .  .  .  .  .  .  .  }
   260  .  .  .  .  .  .  .  .  }
   261  .  .  .  .  .  .  .  .  Ellipsis: -
   262  .  .  .  .  .  .  .  .  Rparen: code.go:16:27
   263  .  .  .  .  .  .  .  }
   264  .  .  .  .  .  .  }
   265  .  .  .  .  .  }
   266  .  .  .  .  .  1: *ast.ReturnStmt {
   267  .  .  .  .  .  .  Return: code.go:17:2
   268  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
   269  .  .  .  .  .  .  .  0: *ast.Ident {
   270  .  .  .  .  .  .  .  .  NamePos: code.go:17:9
   271  .  .  .  .  .  .  .  .  Name: "res"
   272  .  .  .  .  .  .  .  .  Obj: *(obj @ 232)
   273  .  .  .  .  .  .  .  }
   274  .  .  .  .  .  .  }
   275  .  .  .  .  .  }
   276  .  .  .  .  }
   277  .  .  .  .  Rbrace: code.go:18:2
   278  .  .  .  }
   279  .  .  }
   280  .  .  4: *ast.FuncDecl {
   281  .  .  .  Name: *ast.Ident {
   282  .  .  .  .  NamePos: code.go:20:6
   283  .  .  .  .  Name: "PragmaType"
   284  .  .  .  .  Obj: *ast.Object {
   285  .  .  .  .  .  Kind: func
   286  .  .  .  .  .  Name: "PragmaType"
   287  .  .  .  .  .  Decl: *(obj @ 280)
   288  .  .  .  .  }
   289  .  .  .  }
   290  .  .  .  Type: *ast.FuncType {
   291  .  .  .  .  Func: code.go:20:1
   292  .  .  .  .  Params: *ast.FieldList {
   293  .  .  .  .  .  Opening: code.go:20:17
   294  .  .  .  .  .  List: []*ast.Field (len = 1) {
   295  .  .  .  .  .  .  0: *ast.Field {
   296  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
   297  .  .  .  .  .  .  .  .  0: *ast.Ident {
   298  .  .  .  .  .  .  .  .  .  NamePos: code.go:20:18
   299  .  .  .  .  .  .  .  .  .  Name: "pragma"
   300  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   301  .  .  .  .  .  .  .  .  .  .  Kind: var
   302  .  .  .  .  .  .  .  .  .  .  Name: "pragma"
   303  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 295)
   304  .  .  .  .  .  .  .  .  .  }
   305  .  .  .  .  .  .  .  .  }
   306  .  .  .  .  .  .  .  }
   307  .  .  .  .  .  .  .  Type: *ast.Ident {
   308  .  .  .  .  .  .  .  .  NamePos: code.go:20:25
   309  .  .  .  .  .  .  .  .  Name: "string"
   310  .  .  .  .  .  .  .  }
   311  .  .  .  .  .  .  }
   312  .  .  .  .  .  }
   313  .  .  .  .  .  Closing: code.go:20:31
   314  .  .  .  .  }
   315  .  .  .  .  Results: *ast.FieldList {
   316  .  .  .  .  .  Opening: -
   317  .  .  .  .  .  List: []*ast.Field (len = 1) {
   318  .  .  .  .  .  .  0: *ast.Field {
   319  .  .  .  .  .  .  .  Type: *ast.Ident {
   320  .  .  .  .  .  .  .  .  NamePos: code.go:20:33
   321  .  .  .  .  .  .  .  .  Name: "string"
   322  .  .  .  .  .  .  .  }
   323  .  .  .  .  .  .  }
   324  .  .  .  .  .  }
   325  .  .  .  .  .  Closing: -
   326  .  .  .  .  }
   327  .  .  .  }
   328  .  .  .  Body: *ast.BlockStmt {
   329  .  .  .  .  Lbrace: code.go:20:39
   330  .  .  .  .  List: []ast.Stmt (len = 2) {
   331  .  .  .  .  .  0: *ast.AssignStmt {
   332  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
   333  .  .  .  .  .  .  .  0: *ast.Ident {
   334  .  .  .  .  .  .  .  .  NamePos: code.go:21:2
   335  .  .  .  .  .  .  .  .  Name: "res"
   336  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   337  .  .  .  .  .  .  .  .  .  Kind: var
   338  .  .  .  .  .  .  .  .  .  Name: "res"
   339  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 331)
   340  .  .  .  .  .  .  .  .  }
   341  .  .  .  .  .  .  .  }
   342  .  .  .  .  .  .  }
   343  .  .  .  .  .  .  TokPos: code.go:21:6
   344  .  .  .  .  .  .  Tok: :=
   345  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
   346  .  .  .  .  .  .  .  0: *ast.CallExpr {
   347  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   348  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
   349  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:21:9
   350  .  .  .  .  .  .  .  .  .  .  Name: "strings"
   351  .  .  .  .  .  .  .  .  .  }
   352  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   353  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:21:17
   354  .  .  .  .  .  .  .  .  .  .  Name: "ToUpper"
   355  .  .  .  .  .  .  .  .  .  }
   356  .  .  .  .  .  .  .  .  }
   357  .  .  .  .  .  .  .  .  Lparen: code.go:21:24
   358  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   359  .  .  .  .  .  .  .  .  .  0: *ast.IndexExpr {
   360  .  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   361  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   362  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:21:25
   363  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Split"
   364  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 177)
   365  .  .  .  .  .  .  .  .  .  .  .  }
   366  .  .  .  .  .  .  .  .  .  .  .  Lparen: code.go:21:30
   367  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   368  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   369  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:21:31
   370  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "pragma"
   371  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 300)
   372  .  .  .  .  .  .  .  .  .  .  .  .  }
   373  .  .  .  .  .  .  .  .  .  .  .  }
   374  .  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   375  .  .  .  .  .  .  .  .  .  .  .  Rparen: code.go:21:37
   376  .  .  .  .  .  .  .  .  .  .  }
   377  .  .  .  .  .  .  .  .  .  .  Lbrack: code.go:21:38
   378  .  .  .  .  .  .  .  .  .  .  Index: *ast.BasicLit {
   379  .  .  .  .  .  .  .  .  .  .  .  ValuePos: code.go:21:39
   380  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
   381  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   382  .  .  .  .  .  .  .  .  .  .  }
   383  .  .  .  .  .  .  .  .  .  .  Rbrack: code.go:21:40
   384  .  .  .  .  .  .  .  .  .  }
   385  .  .  .  .  .  .  .  .  }
   386  .  .  .  .  .  .  .  .  Ellipsis: -
   387  .  .  .  .  .  .  .  .  Rparen: code.go:21:41
   388  .  .  .  .  .  .  .  }
   389  .  .  .  .  .  .  }
   390  .  .  .  .  .  }
   391  .  .  .  .  .  1: *ast.ReturnStmt {
   392  .  .  .  .  .  .  Return: code.go:22:2
   393  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
   394  .  .  .  .  .  .  .  0: *ast.Ident {
   395  .  .  .  .  .  .  .  .  NamePos: code.go:22:9
   396  .  .  .  .  .  .  .  .  Name: "res"
   397  .  .  .  .  .  .  .  .  Obj: *(obj @ 336)
   398  .  .  .  .  .  .  .  }
   399  .  .  .  .  .  .  }
   400  .  .  .  .  .  }
   401  .  .  .  .  }
   402  .  .  .  .  Rbrace: code.go:23:2
   403  .  .  .  }
   404  .  .  }
   405  .  .  5: *ast.FuncDecl {
   406  .  .  .  Name: *ast.Ident {
   407  .  .  .  .  NamePos: code.go:25:6
   408  .  .  .  .  Name: "main"
   409  .  .  .  .  Obj: *ast.Object {
   410  .  .  .  .  .  Kind: func
   411  .  .  .  .  .  Name: "main"
   412  .  .  .  .  .  Decl: *(obj @ 405)
   413  .  .  .  .  }
   414  .  .  .  }
   415  .  .  .  Type: *ast.FuncType {
   416  .  .  .  .  Func: code.go:25:1
   417  .  .  .  .  Params: *ast.FieldList {
   418  .  .  .  .  .  Opening: code.go:25:10
   419  .  .  .  .  .  Closing: code.go:25:11
   420  .  .  .  .  }
   421  .  .  .  }
   422  .  .  .  Body: *ast.BlockStmt {
   423  .  .  .  .  Lbrace: code.go:25:12
   424  .  .  .  .  List: []ast.Stmt (len = 3) {
   425  .  .  .  .  .  0: *ast.ExprStmt {
   426  .  .  .  .  .  .  X: *ast.CallExpr {
   427  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   428  .  .  .  .  .  .  .  .  X: *ast.Ident {
   429  .  .  .  .  .  .  .  .  .  NamePos: code.go:27:2
   430  .  .  .  .  .  .  .  .  .  Name: "fmt"
   431  .  .  .  .  .  .  .  .  }
   432  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   433  .  .  .  .  .  .  .  .  .  NamePos: code.go:27:6
   434  .  .  .  .  .  .  .  .  .  Name: "Println"
   435  .  .  .  .  .  .  .  .  }
   436  .  .  .  .  .  .  .  }
   437  .  .  .  .  .  .  .  Lparen: code.go:27:13
   438  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
   439  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   440  .  .  .  .  .  .  .  .  .  ValuePos: code.go:27:14
   441  .  .  .  .  .  .  .  .  .  Kind: STRING
   442  .  .  .  .  .  .  .  .  .  Value: "\"¿Es pragma gomp? ->\""
   443  .  .  .  .  .  .  .  .  }
   444  .  .  .  .  .  .  .  .  1: *ast.CallExpr {
   445  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   446  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:27:38
   447  .  .  .  .  .  .  .  .  .  .  Name: "IsPragmaGomp"
   448  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 68)
   449  .  .  .  .  .  .  .  .  .  }
   450  .  .  .  .  .  .  .  .  .  Lparen: code.go:27:50
   451  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   452  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   453  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:27:51
   454  .  .  .  .  .  .  .  .  .  .  .  Name: "str"
   455  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 41)
   456  .  .  .  .  .  .  .  .  .  .  }
   457  .  .  .  .  .  .  .  .  .  }
   458  .  .  .  .  .  .  .  .  .  Ellipsis: -
   459  .  .  .  .  .  .  .  .  .  Rparen: code.go:27:54
   460  .  .  .  .  .  .  .  .  }
   461  .  .  .  .  .  .  .  }
   462  .  .  .  .  .  .  .  Ellipsis: -
   463  .  .  .  .  .  .  .  Rparen: code.go:27:55
   464  .  .  .  .  .  .  }
   465  .  .  .  .  .  }
   466  .  .  .  .  .  1: *ast.ExprStmt {
   467  .  .  .  .  .  .  X: *ast.CallExpr {
   468  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   469  .  .  .  .  .  .  .  .  X: *ast.Ident {
   470  .  .  .  .  .  .  .  .  .  NamePos: code.go:28:2
   471  .  .  .  .  .  .  .  .  .  Name: "fmt"
   472  .  .  .  .  .  .  .  .  }
   473  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   474  .  .  .  .  .  .  .  .  .  NamePos: code.go:28:6
   475  .  .  .  .  .  .  .  .  .  Name: "Println"
   476  .  .  .  .  .  .  .  .  }
   477  .  .  .  .  .  .  .  }
   478  .  .  .  .  .  .  .  Lparen: code.go:28:13
   479  .  .  .  .  .  .  .  Args: []ast.Expr (len = 6) {
   480  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   481  .  .  .  .  .  .  .  .  .  ValuePos: code.go:28:14
   482  .  .  .  .  .  .  .  .  .  Kind: STRING
   483  .  .  .  .  .  .  .  .  .  Value: "\"Campos de pragma ->\""
   484  .  .  .  .  .  .  .  .  }
   485  .  .  .  .  .  .  .  .  1: *ast.IndexExpr {
   486  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   487  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   488  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:28:37
   489  .  .  .  .  .  .  .  .  .  .  .  Name: "Split"
   490  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 177)
   491  .  .  .  .  .  .  .  .  .  .  }
   492  .  .  .  .  .  .  .  .  .  .  Lparen: code.go:28:42
   493  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   494  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   495  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:28:43
   496  .  .  .  .  .  .  .  .  .  .  .  .  Name: "str"
   497  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 41)
   498  .  .  .  .  .  .  .  .  .  .  .  }
   499  .  .  .  .  .  .  .  .  .  .  }
   500  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   501  .  .  .  .  .  .  .  .  .  .  Rparen: code.go:28:46
   502  .  .  .  .  .  .  .  .  .  }
   503  .  .  .  .  .  .  .  .  .  Lbrack: code.go:28:47
   504  .  .  .  .  .  .  .  .  .  Index: *ast.BasicLit {
   505  .  .  .  .  .  .  .  .  .  .  ValuePos: code.go:28:48
   506  .  .  .  .  .  .  .  .  .  .  Kind: INT
   507  .  .  .  .  .  .  .  .  .  .  Value: "0"
   508  .  .  .  .  .  .  .  .  .  }
   509  .  .  .  .  .  .  .  .  .  Rbrack: code.go:28:49
   510  .  .  .  .  .  .  .  .  }
   511  .  .  .  .  .  .  .  .  2: *ast.BasicLit {
   512  .  .  .  .  .  .  .  .  .  ValuePos: code.go:28:52
   513  .  .  .  .  .  .  .  .  .  Kind: STRING
   514  .  .  .  .  .  .  .  .  .  Value: "\",\""
   515  .  .  .  .  .  .  .  .  }
   516  .  .  .  .  .  .  .  .  3: *ast.IndexExpr {
   517  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   518  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   519  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:28:57
   520  .  .  .  .  .  .  .  .  .  .  .  Name: "Split"
   521  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 177)
   522  .  .  .  .  .  .  .  .  .  .  }
   523  .  .  .  .  .  .  .  .  .  .  Lparen: code.go:28:62
   524  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   525  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   526  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:28:63
   527  .  .  .  .  .  .  .  .  .  .  .  .  Name: "str"
   528  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 41)
   529  .  .  .  .  .  .  .  .  .  .  .  }
   530  .  .  .  .  .  .  .  .  .  .  }
   531  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   532  .  .  .  .  .  .  .  .  .  .  Rparen: code.go:28:66
   533  .  .  .  .  .  .  .  .  .  }
   534  .  .  .  .  .  .  .  .  .  Lbrack: code.go:28:67
   535  .  .  .  .  .  .  .  .  .  Index: *ast.BasicLit {
   536  .  .  .  .  .  .  .  .  .  .  ValuePos: code.go:28:68
   537  .  .  .  .  .  .  .  .  .  .  Kind: INT
   538  .  .  .  .  .  .  .  .  .  .  Value: "1"
   539  .  .  .  .  .  .  .  .  .  }
   540  .  .  .  .  .  .  .  .  .  Rbrack: code.go:28:69
   541  .  .  .  .  .  .  .  .  }
   542  .  .  .  .  .  .  .  .  4: *ast.BasicLit {
   543  .  .  .  .  .  .  .  .  .  ValuePos: code.go:28:72
   544  .  .  .  .  .  .  .  .  .  Kind: STRING
   545  .  .  .  .  .  .  .  .  .  Value: "\",\""
   546  .  .  .  .  .  .  .  .  }
   547  .  .  .  .  .  .  .  .  5: *ast.IndexExpr {
   548  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   549  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   550  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:28:77
   551  .  .  .  .  .  .  .  .  .  .  .  Name: "Split"
   552  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 177)
   553  .  .  .  .  .  .  .  .  .  .  }
   554  .  .  .  .  .  .  .  .  .  .  Lparen: code.go:28:82
   555  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   556  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   557  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:28:83
   558  .  .  .  .  .  .  .  .  .  .  .  .  Name: "str"
   559  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 41)
   560  .  .  .  .  .  .  .  .  .  .  .  }
   561  .  .  .  .  .  .  .  .  .  .  }
   562  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   563  .  .  .  .  .  .  .  .  .  .  Rparen: code.go:28:86
   564  .  .  .  .  .  .  .  .  .  }
   565  .  .  .  .  .  .  .  .  .  Lbrack: code.go:28:87
   566  .  .  .  .  .  .  .  .  .  Index: *ast.BasicLit {
   567  .  .  .  .  .  .  .  .  .  .  ValuePos: code.go:28:88
   568  .  .  .  .  .  .  .  .  .  .  Kind: INT
   569  .  .  .  .  .  .  .  .  .  .  Value: "2"
   570  .  .  .  .  .  .  .  .  .  }
   571  .  .  .  .  .  .  .  .  .  Rbrack: code.go:28:89
   572  .  .  .  .  .  .  .  .  }
   573  .  .  .  .  .  .  .  }
   574  .  .  .  .  .  .  .  Ellipsis: -
   575  .  .  .  .  .  .  .  Rparen: code.go:28:90
   576  .  .  .  .  .  .  }
   577  .  .  .  .  .  }
   578  .  .  .  .  .  2: *ast.ExprStmt {
   579  .  .  .  .  .  .  X: *ast.CallExpr {
   580  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   581  .  .  .  .  .  .  .  .  X: *ast.Ident {
   582  .  .  .  .  .  .  .  .  .  NamePos: code.go:29:2
   583  .  .  .  .  .  .  .  .  .  Name: "fmt"
   584  .  .  .  .  .  .  .  .  }
   585  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   586  .  .  .  .  .  .  .  .  .  NamePos: code.go:29:6
   587  .  .  .  .  .  .  .  .  .  Name: "Println"
   588  .  .  .  .  .  .  .  .  }
   589  .  .  .  .  .  .  .  }
   590  .  .  .  .  .  .  .  Lparen: code.go:29:13
   591  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
   592  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   593  .  .  .  .  .  .  .  .  .  ValuePos: code.go:29:14
   594  .  .  .  .  .  .  .  .  .  Kind: STRING
   595  .  .  .  .  .  .  .  .  .  Value: "\"Tipo de pragma:\""
   596  .  .  .  .  .  .  .  .  }
   597  .  .  .  .  .  .  .  .  1: *ast.CallExpr {
   598  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   599  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:29:33
   600  .  .  .  .  .  .  .  .  .  .  Name: "PragmaType"
   601  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 284)
   602  .  .  .  .  .  .  .  .  .  }
   603  .  .  .  .  .  .  .  .  .  Lparen: code.go:29:43
   604  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   605  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   606  .  .  .  .  .  .  .  .  .  .  .  NamePos: code.go:29:44
   607  .  .  .  .  .  .  .  .  .  .  .  Name: "str"
   608  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 41)
   609  .  .  .  .  .  .  .  .  .  .  }
   610  .  .  .  .  .  .  .  .  .  }
   611  .  .  .  .  .  .  .  .  .  Ellipsis: -
   612  .  .  .  .  .  .  .  .  .  Rparen: code.go:29:47
   613  .  .  .  .  .  .  .  .  }
   614  .  .  .  .  .  .  .  }
   615  .  .  .  .  .  .  .  Ellipsis: -
   616  .  .  .  .  .  .  .  Rparen: code.go:29:48
   617  .  .  .  .  .  .  }
   618  .  .  .  .  .  }
   619  .  .  .  .  }
   620  .  .  .  .  Rbrace: code.go:30:2
   621  .  .  .  }
   622  .  .  }
   623  .  }
   624  .  Scope: *ast.Scope {
   625  .  .  Objects: map[string]*ast.Object (len = 5) {
   626  .  .  .  "IsPragmaGomp": *(obj @ 68)
   627  .  .  .  "Split": *(obj @ 177)
   628  .  .  .  "PragmaType": *(obj @ 284)
   629  .  .  .  "main": *(obj @ 409)
   630  .  .  .  "str": *(obj @ 41)
   631  .  .  }
   632  .  }
   633  .  Imports: []*ast.ImportSpec (len = 2) {
   634  .  .  0: *(obj @ 12)
   635  .  .  1: *(obj @ 20)
   636  .  }
   637  .  Unresolved: []*ast.Ident (len = 13) {
   638  .  .  0: *(obj @ 49)
   639  .  .  1: *(obj @ 91)
   640  .  .  2: *(obj @ 103)
   641  .  .  3: *(obj @ 132)
   642  .  .  4: *(obj @ 200)
   643  .  .  5: *(obj @ 214)
   644  .  .  6: *(obj @ 244)
   645  .  .  7: *(obj @ 307)
   646  .  .  8: *(obj @ 319)
   647  .  .  9: *(obj @ 348)
   648  .  .  10: *(obj @ 428)
   649  .  .  11: *(obj @ 469)
   650  .  .  12: *(obj @ 581)
   651  .  }
   652  }
